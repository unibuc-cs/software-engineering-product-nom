@using Chir.ia_project.Models.Enum
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" />
<style>
    /* Previous styles remain the same until images section */
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
    }

    .card-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        min-height: 700px;
        position: relative;
        z-index: 1;
    }

    .card {
        width: 400px;
        height: 600px;
        position: absolute;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        opacity: 0;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        cursor: grab;
        transform: translateX(-50%) translateY(-50%);
        left: 50%;
        top: 50%;
    }

    @@media (max-width: 480px) {
        .card

    {
        width: 90%;
        height: 80vh;
    }

    }

    .card.active {
        opacity: 1;
        z-index: 2;
    }

    .card-body {
        flex: 1;
        overflow: hidden;
        padding: 0;
        display: flex;
        flex-direction: column;
    }

    .images {
        flex: 1;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        background: #f8f8f8;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .responsive-image {
        max-width: 100%;
        max-height: 100%;
        width: auto;
        height: auto;
        object-fit: contain;
        pointer-events: none;
        opacity: 0;
        position: absolute;
        transition: opacity 0.3s ease;
    }

        .responsive-image.active {
            opacity: 1;
            position: relative;
        }

    .nav-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(255, 255, 255, 0.8);
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        z-index: 3;
        transition: background-color 0.3s;
    }

        .nav-arrow:hover {
            background: rgba(255, 255, 255, 0.9);
        }

        .nav-arrow.prev {
            left: 10px;
        }

        .nav-arrow.next {
            right: 10px;
        }

    .info {
        padding: 15px;
        text-align: center;
        background: white;
    }

    /* Image counter style */
    .image-counter {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.5);
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
    }
</style>

<div class="card-container" id="cardContainer">
    @for (var i = 0; i < Model.ListingsList.Count; i++)
    {
        var listing = Model.ListingsList[i];
        <div class="card @(i == 0 ? "active" : "")" data-id="@listing.Id">
            <div class="card-body">
                @if (listing.Images != null && listing.Images.Count > 0)
                {
                    <div class="images">
                        <div class="image-container">
                            @foreach (var image in listing.Images)
                            {
                                <img src="data:@image.ContentType;base64,@Convert.ToBase64String(image.ContentBytes)"
                                     alt="Image for @listing.Id" class="responsive-image" draggable="false" />
                            }
                            @if (listing.Images.Count > 1)
                            {
                                <button class="nav-arrow prev">←</button>
                                <button class="nav-arrow next">→</button>
                                <div class="image-counter">1 / @listing.Images.Count</div>
                            }
                        </div>
                    </div>
                }
                <div class="info">
                    <img src="~/@(SeismicRiskExtension.ToFriendlyString(listing.SeismicRisk))_seismic_risk.jpg" alt="@listing.SeismicRisk seismic risk" style="width: 5vw; height: 5vw;" />
                    <p>@listing.TotalLivableArea</p>
                    <p>@listing.Details</p>
                </div>
            </div>
        </div>
    }
</div>

<script>
    // Previous card swipe code remains the same...
    const cardContainer = document.getElementById('cardContainer');
    const cards = Array.from(document.querySelectorAll('.card'));
    let currentIndex = 0;
    let startX = 0;
    let offsetX = 0;
    let isDragging = false;

    // Initialize cards and image navigation
    if (cards.length > 0) {
        activateCard(cards[0]);
    }

    function activateCard(card) {
        card.classList.add('active');
        card.addEventListener('mousedown', (e) => startDragging(e, card));
        card.addEventListener('touchstart', (e) => startDragging(e, card), { passive: true });

        // Initialize first image
        const images = Array.from(card.querySelectorAll('.responsive-image'));
        if (images.length > 0) {
            images[0].classList.add('active');
        }

        // Set up image navigation
        const prevBtn = card.querySelector('.nav-arrow.prev');
        const nextBtn = card.querySelector('.nav-arrow.next');

        if (prevBtn && nextBtn) {
            let currentImageIndex = 0;
            const counter = card.querySelector('.image-counter');

            prevBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (currentImageIndex > 0) {
                    images[currentImageIndex].classList.remove('active');
                    currentImageIndex--;
                    images[currentImageIndex].classList.add('active');
                    updateCounter();
                }
            });

            nextBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                if (currentImageIndex < images.length - 1) {
                    images[currentImageIndex].classList.remove('active');
                    currentImageIndex++;
                    images[currentImageIndex].classList.add('active');
                    updateCounter();
                }
            });

            function updateCounter() {
                counter.textContent = `${currentImageIndex + 1} / ${images.length}`;
            }
        }
    }

    // Rest of the previous functions remain the same...
    function startDragging(e, card) {
        if (e.target.tagName.toLowerCase() === 'img' || e.target.classList.contains('nav-arrow')) return;

        startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
        isDragging = true;
        card.style.transition = 'none';
        offsetX = 0;

        const moveHandler = (event) => dragCard(event, card);
        const endHandler = () => stopDragging(card, moveHandler, endHandler);

        if (e.type === 'mousedown') {
            document.addEventListener('mousemove', moveHandler);
            document.addEventListener('mouseup', endHandler);
        } else {
            document.addEventListener('touchmove', moveHandler, { passive: false });
            document.addEventListener('touchend', endHandler);
            document.addEventListener('touchcancel', endHandler);
        }
    }

    function dragCard(e, card) {
        if (!isDragging) return;
        e.preventDefault();
        const clientX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
        offsetX = clientX - startX;
        card.style.transform = `translateX(calc(-50% + ${offsetX}px)) translateY(-50%)`;
    }

    function stopDragging(card, moveHandler, endHandler) {
        if (!isDragging) return;

        isDragging = false;
        card.style.transition = 'transform 0.3s, opacity 0.3s';

        if (Math.abs(offsetX) > 100) {
            removeCard(card, offsetX > 0);
        } else {
            card.style.transform = 'translateX(-50%) translateY(-50%)';
        }

        document.removeEventListener('mousemove', moveHandler);
        document.removeEventListener('mouseup', endHandler);
        document.removeEventListener('touchmove', moveHandler);
        document.removeEventListener('touchend', endHandler);
        document.removeEventListener('touchcancel', endHandler);
    }

    function removeCard(card, isRight) {
    const direction = isRight ? 300 : -300;
    card.style.transform = `translateX(calc(-50% + ${direction}px)) translateY(-50%)`;
    card.style.opacity = '0';

    // Send engagement data to server
    if (isRight) {
        const listingId = card.dataset.id;
        fetch('/Listing/AddEngagement', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                listingId: listingId,
                likeValue: @((int)LikeValue.Liked)
            })
        });
    }

    setTimeout(() => {
        card.remove();
        cards.splice(currentIndex, 1);
        if (cards.length > 0 && currentIndex < cards.length) {
            activateCard(cards[currentIndex]);
        }
    }, 300);
}
</script>