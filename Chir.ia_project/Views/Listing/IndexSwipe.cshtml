@model Chir.ia_project.Services.Dtos.ListingsResponse

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"/>
<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden; /* Prevent overflow */
    }

    .card-container {
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        width: 100vw; /* Full width */
        height: 100vh; /* Full height */
        overflow: hidden; /* Prevent overflow */
    }

    .card {
        width: 60%; /* Responsive width */
        height: 70%; /* Fixed height */
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        position: absolute;
        background: white;
        cursor: grab;
        z-index: 10;
        transition: transform 0.3s, opacity 0.3s;
        top: 50%; /* Initial vertical centering */
        left: 50%; /* Initial horizontal centering */
        transform: translate(-50%, -50%); /* Correct centering for all cards */
        opacity: 0; /* Initially hide all cards */
    }

        .card.active {
            z-index: 20; /* Ensure the active card is in front */
            opacity: 1; /* Make the active card visible */
        }

        .card img {
            width: 100%;
            height: 70%;
            object-fit: cover;
        }

        .card .info {
            padding: 10px;
            text-align: center;
        }
 
</style>

<div class="card-container" id="cardContainer">
    @for (var i = 0; i < Model.ListingsList.Count; i++)
    {
        var listing = Model.ListingsList[i];
        <div class="card @(i == 0 ? "active" : "")" data-id="@listing.Id">
            @*<img src="@item.ImageUrl" alt="@item.Title" />*@
            <div class="info">
                <p>@listing.SeismicRisk</p>
                <p>@listing.TotalLivableArea</p>
                <p>@listing.Details</p>
            </div>
        </div>
    }
</div>

<script>
    const cardContainer = document.getElementById('cardContainer');
    const cards = document.querySelectorAll('.card');
    let currentIndex = 0; // Current card index
    let startX = 0; // Initial position
    let currentX = 0; // Current position
    let isDragging = false;

    // Initialize the first card
    if (cards.length > 0) {
        cards[0].classList.add('active'); // Ensure the first card is active
        setupCard(cards[0]);
    }

    function setupCard(card) {
        let offsetX = 0; // Card position

        // Mouse Down event
        card.addEventListener('mousedown', (e) => {
            startX = e.clientX; // Save start position
            isDragging = true;
            card.style.cursor = 'grabbing';
            card.style.transition = 'none'; // Disable transition during drag

            // Mouse Move event
            const onMouseMove = (e) => {
                if (!isDragging) return;
                const diffX = e.clientX - startX; // Calculate displacement
                offsetX = diffX;
                card.style.transform = `translate(-50%, -50%) translateX(${diffX}px)`; // Move card
            };

            // Mouse Up event
            const onMouseUp = () => {
                isDragging = false;
                card.style.cursor = 'grab';
                card.style.transition = 'transform 0.3s, opacity 0.3s'; // Re-enable transition

                // Detect swipe
                if (offsetX > 100) { // Swipe right
                    removeCard(card, true);
                } else if (offsetX < -100) { // Swipe left
                    removeCard(card, false);
                } else {
                    // Return to initial position
                    card.style.transform = 'translate(-50%, -50%) translateX(0px)';
                }

                // Remove mouse events
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            };

            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
        });

            card.addEventListener('touchstart', handleTouchStart);

        function handleTouchStart(e) {
            startX = e.touches[0].clientX;
            isDragging = true;
            card.style.transition = 'none';

            document.addEventListener('touchmove', handleTouchMove, { passive: false });
            document.addEventListener('touchend', handleTouchEnd);
            document.addEventListener('touchcancel', handleTouchEnd);
        }

        function handleTouchMove(e) {
            if (!isDragging) return;
            e.preventDefault(); // Prevent scrolling while dragging
            const touch = e.touches[0];
            const diffX = touch.clientX - startX;
            offsetX = diffX;
            card.style.transform = `translate(-50%, -50%) translateX(${diffX}px)`;
        }

        function handleTouchEnd() {
            if (!isDragging) return;
            isDragging = false;
            card.style.transition = 'transform 0.3s, opacity 0.3s';

            if (offsetX > 100) {
                removeCard(card, true);
            } else if (offsetX < -100) {
                removeCard(card, false);
            } else {
                card.style.transform = 'translate(-50%, -50%) translateX(0px)';
            }

            document.removeEventListener('touchmove', handleTouchMove);
            document.removeEventListener('touchend', handleTouchEnd);
            document.removeEventListener('touchcancel', handleTouchEnd);
        }
    }

    // Remove the current card and activate the next one
    function removeCard(card, isRight) {
        card.style.transform = isRight ? 'translate(calc(-50% + 300px), -50%)' : 'translate(calc(-50% - 300px), -50%)';
        card.style.opacity = '0';

        // After animation, remove card and move to the next one
        setTimeout(() => {
            card.remove();
            if (cards.length > 0) {
                currentIndex++;
                if (currentIndex < cards.length) {
                    if (currentIndex > 0) {
                        cards[currentIndex - 1]?.classList.remove('active'); // Remove active from the previous card
                    }
                    cards[currentIndex].classList.add('active');
                    setupCard(cards[currentIndex]); // Activate the next card
                }
            }
        }, 300);
    }


</script>